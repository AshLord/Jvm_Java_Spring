package org.java.practice.java;

/**
 * Created by 晋阳 on 2017/9/24.
 */
public class AccessFlag {

    public void func0() {
        //共有方法 表明该数据成员、成员函数是对所有用户开放的，所有用户都可以直接进行调用
    }

    private void func1() {
        //私有方法 示私有，私有的意思就是除了class自己之外，任何人都不可以直接使用，私有财产神圣不可侵犯嘛，即便是子女，朋友，都不可以使用。
    }

    protected void func2() {
        //对于子女、朋友来说，就是public的，可以自由使用，没有任何限制，而对于其他的外部class，protected就变成private。
    }

    static void fun3() {
        //static类能够被它自己使用，而不必引用特定的实例；static类能够在它的类的任何对象创建之前被访问，而不必引用任何对象
    }

    final void fun4() {
        /**
         * 将方法声明为final那有两个原因，第一就是说明你已经知道这个方法提供的功能已经满足你要求，不需要进行扩展，
         * 并且也不允许任何从此类继承的类来覆写这个方法，但是继承仍然可以继承这个方法，也就是说可以直接使用。
         * 第二就是允许编译器将所有对此方法的调用转化为inline调用的机制，它会使你在调用final方法时，直接将
         * 方法主体插入到调用处，而不是进行例行的方法调用，例如保存断点，压栈等，这样可能会使你的程序效率有所提高，
         * 然而当你的方法主体非常庞大时，或你在多处调用此方法，那么你的调用主体代码便会迅速膨胀，可能反而会影响效率，
         * 所以你要慎用final进行方法定义。
         */
    }

    synchronized void fun5() {
        //同步方法，一个线程如果想要调用该方法必须获得锁才能执行
    }

    /**
     * JAVA的native方法适用的情况：
     　　1、为了使用底层的主机平台的某个特性，而这个特性不能通过JAVA API访问。
     　　2、为了访问一个老的系统或者使用一个已有的库，而这个系统或这个库不是用JAVA编写的。
     　　3、为了加快程序的性能，而将一段时间敏感的代码作为本地方法实现。
     */
    native void fun6();
}
