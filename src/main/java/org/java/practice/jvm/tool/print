 [Disassembling for mach='i386']
 [Entry Point]
 [Constants]
 #{method}'sum''（I）I'in'test/Bar'
 #this：ecx='test/Bar'
 #parm0：edx=int
 #[sp+0x20]（sp of caller）
 ……
 0x01cac407：cmp 0x4（%ecx），%eax
 0x01cac40a：jne 0x01c6b050；{runtime_call}
 [Verified Entry Point]

 #检查栈溢
 0x01cac410：mov%eax，-0x8000（%esp）

 #保存上一栈帧基址
 0x01cac417：push%ebp

 #给新帧分配空间
 0x01cac418：sub$0x18，%esp；*aload_0

 ；-test.Bar：sum@0（line 8）
 ；block B0[0，10]

 #取实例变量a，这里0x8（%ecx）就是ecx+0x8的意思，前
 #面“[Constants]”节中提示了“this：ecx='test/Bar'”，即ecx寄存器中放的就是this对象的地址。偏
 #移0x8是越过this对象的对象头，之后就是实例变量a的内存位置。这次是访问“Java堆”中的数据。
 0x01cac41b：mov 0x8（%ecx），%eax；*getfield a

 ；-test.Bar：sum@1（line 8）

 #取test.Bar在方法区的指针
 0x01cac41e：mov$0x3d2fad8，%esi；{oop（a
 'java/lang/Class'='test/Bar'）}

 #取类变量b，这次是访问“方法区”中的数据。
 0x01cac423：mov 0x68（%esi），%esi；*getstatic b
 ；-test.Bar：sum@4（line 8）

 #做两次加法，求a+b+c的值，前面的代码把a放在
 #eax中，把b放在esi中，而c在[Constants]中提示了，“parm0：edx=int”，说明c在edx中。
 0x01cac426：add%esi，%eax
 0x01cac428：add%edx，%eax

 #撤销栈帧
 0x01cac42a：add$0x18，%esp

 #恢复上一栈帧
 0x01cac42d：pop%ebp

 #轮询方法返回处的SafePoint。
 0x01cac42e：test%eax，0x2b0100；{poll_return}

 #方法返回
 0x01cac434：ret